/*! \file
    \brief Implementation of the fragments list for \ref pktfrag_t

*/

/* system include */
#include <iostream>

/* local include */
#include "neoip_pktfrag_fraglist.hpp"
#include "neoip_assert.hpp"
#include "neoip_nipmem_alloc.hpp"
#include "neoip_log.hpp"

NEOIP_NAMESPACE_BEGIN

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//                       canonical object management
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

/** \brief convert the object into a string
 */
std::string	pktfrag_fraglist_t::to_string()				const throw()
{
	std::stringstream	oss;
	// build the string
	oss << frag_db.size() << " fragments";
	// return the just built string
	return oss.str();
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//                         sequence number function
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

/** \brief set the fragmentation sequence number
 */
void	pktfrag_fraglist_t::set_seqnb(uint32_t seqnb)				throw()
{
	this->seqnb	= seqnb;
}

/** \brief add a fragment to the list
 */
void	pktfrag_fraglist_t::add_fragment(const pkt_t &fragment)		throw()
{
	frag_db.push_back(fragment);
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//                      array operator
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

/** \brief return a code pointer of the given index
 */
pkt_t &	pktfrag_fraglist_t::operator[](int idx)			throw()
{
	// sanity check - the index MUST be < to the number of fragment
	DBG_ASSERT( idx < (int)frag_db.size() );
	// return the fragment
	return frag_db[idx];
}


NEOIP_NAMESPACE_END



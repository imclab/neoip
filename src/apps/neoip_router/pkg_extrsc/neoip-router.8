.\" -*- nroff -*-
.TH NEOIP-ROUTER 8 "Dec 2006" "neoip-router(1)" "neoip-router's Manual"
.SH NAME
neoip-router - provides IPv4 end-to-end, mobility and security
.SH SYNOPSIS
.B neoip-router
[--config_dir dirname] [--help] [--version] [--register dnsname]
[--create_rootca dnsname] [--info]
.SH DESCRIPTION
neoip-router is a deamon which espablishes secure IP tunnels on the fly.
It works over NAT.to brings back end-to-end capability over IPv4.
This capability has been lost when NAT happens in early 90's.

TODO this man page is just a stub. complete it

TODO document the variable in neoip_router.conf
TODO document the file format for the .local and .public file

the domain name of the selfsigned identity is always *.neoip

.SH Identity type comparison
Identities may be of 3 types: selfsigned, authsigned or nonesigned. They have different
features. Choose the one which fit your needs.
.TP
.I "selfsigned"
The identity is signed by the local neoip-router itself. It will produce a public
file which need to be put in all the remote neoip-router you wish to contact.
This model is similar to the one used by ssh tools. This requirement of changing
the configuration of remote neoip-peer allows not to rely on any trusted third-party
to be authenticated but force to modify the configuration of the remote neoip-router.
So it is more standalone by less scalable than the authsigned type.
.TP
.I "authsigned"
The identity is signed by a trusted third party. The local neoip-router will be
able to be authenticated by any other neoip-router which trust this third party.
This model is similar to the one used for https certificate. Its main advantage
is that the remote neoip-router which already trust the third-party wont need to be 
modified to authenticate you. It has the advantage of providing a good
scalability but it has the disadvantage of relying on a third-party.
.TP
.I "nonesigned"
The nonesigned identity can initiate connection toward a authsigned peer but it can
not receives a connection. Once the connection is established tho, the ip packet 
can travel both ways.

It should be considered as a 'anybody' identity. 

it used the *.unauthenticated domain name

By default the hostname_acl.conf do not permit it.

This identity type is specifically designed to ease the installation. 
It allow the neoip-router to get an identity able to connection authsigned neoip-router
without any human intervention. Thus as soon as the neoip-router is installed,
and that no previous identity is found, a nonesigned identity is generated by 
default..


.SH About dnsname and their usages 
A dnsname is a hostname followed by a domainname. 
Currently it is not allowed to get a hierachy of domain/tld as it is in 
usual dns on the internet.

Example:
john_smith.superdom
- this is the hostname 'john_smith' with the domain 'superdom'

john_smith.*
- this is a hostname 'john_smith' within the 'selfsigned' domain

*.superdom
- this is the dnsname for the whole 'superdom' domain


To register a 
neoip-router-bin --register john.*


.SH dnsname and internationnalization
The dnsname is international-ok..
this is my unknownledgable way to say they are idn-ok, aka you can put accent
or non ascii characteres in it which match your local language.
As idn has been used by some attackers to perform 'fishing', some browsers are
rightfully limitations on which tld can perform idn or not. *.neoip is unknown 
to them.
e.g. firefox needs to told to accept idn hostname with *.neoip. do "about:config"
and create the variable "network.IDN.whitelist.neoip" as a boolean which you
set to "true". and now you can browse with idn hostname from neoip without issue.

.SH OPTIONS
.TP
.I "-r, --register dnsname"
Generate the local identity for the router. It MUST be done before establishing
the first connection.
.TP
.I "--create_rootca domain-only-dnsname"
Create the rootca files for the domain-only-dnsname provided as parameter and 
store them in the current directory. The private file is called domain.rootca_priv
and the public file is called domain.rootca_cert.
.TP
.I "--verbose"
Provide more verbose information.
.TP
.I "-i, --info"
Display information from the current configuration. It aims to help during the 
condifiguration phase. By default, it provides a summary of the configuration. 
To get more details on the information options, use it with "--verbose"
.TP
.I "--info-local-identity"
Display information on the local identity.
.TP
.I "--info-remote-identity"
Display information on the remote identities.
.TP
.I "--info-rootca"
Display information on the rootca.
.TP
.I "--info-acl"
Display information on the access control list.
.TP
.I "--info-acache"
Display information on the address cache.
.TP
.I "-d, --nodaemon"
If this option is set, the application will not daemonize itself and will
remain in the foreground. This is usefull for debugging.
.TP
.I "-c, --config_dir dirname"
set the configuration directory.
If not specified, it uses /etc/neoip-router.
.TP
.I "-h, --help"
display a short inlined help
.TP
.I "-v, --version"
display the version string


.SH HOWTO create a new selfsigned identity
1. register a local selfsigned identity, say johnsmith
   $ sudo neoip-router-bin --register johnsmith.*

   This will creates 2 files in /etc/neoip-router/router/local_identity. 
   johnsmith.selfsigned_priv which is the private file and johnsmith.selfsigned_cert
   which is the public infomation. Additionally it will create a symlink from 
   /etc/neoip-router/router/current_identity.priv toward johnsmith.selfsigned_priv.
   You may send the johnsmith.selfsigned_cert file to any remote neoip-router
   you want to be authorized by.

2. Give johnsmith.selfsigned_priv file to a neoip-router you wish to be authorized by.
   It must copy it to the neoip-router authorized_peer.d directory. Lets say the 
   remote peer got the files in /tmp/johnsmith.selfsigned_cert. 
   $ sudo cp /tmp/johnsmith.selfsigned_cert /etc/neoip_router/router/authorized_peer.d

3. neoip-router must be restarted on both computers to take into account the new identity.
   $ sudo /etc/init.d/neoip-router restart

.SH Configuration file name extension and security
The configuration file which end by _priv are private (contains private key and such)
and so MUST NOT be shared with anyone.
The one ended by _cert are public and may be shared safely with anyone.

.SH FILES
This sections describes the various files and directory used by the neoip-router :
.TP
.I /etc/neoip-router
default configuration directory
.TP
.I config_dir/router/neoip_router.conf
This file contains a set of variable to tune the behaviour of the router.
TODO write a man page about the variable in it.
.TP
.I config_dir/router/local_identity.private
This file contains the private part of the local identity for the router. It MUST NOT be shared 
with anyone as it contains the private key.
.TP
.I config_dir/router/yourpeername.threedigit.public
This file contains the public part of the local identity for the router. It MAY be shared with
anyone. It is the file to be sent to other peers for them to authorized access. 
e.g. foobar.123.public. the three digit is only there to avoid filename conflict
when it is copied in a remote authorized_peer.d directory (TODO to check if it 
is usefull or even valid)
.TP
.I config_dir/router/ip_address_cache.db
This file contains the address cache of the router. This allow to reuse the same
IP address when possible and thus ensure smoother transition between run.
.TP
.I config_dir/router/authorized_peer.d
This is the directory containing the public identity of the remote peers which 
have been authorized to connect the local peer.


.SH LICENSE
The license is proprietary and this programm should be used for testing purpose only

.SH AUTHOR
.B neoip-router
has been written by Jerome Etienne <jme@off.net>

NeoIP's homepage is http://off.net/~jme/neoip

.SH BUGS
If you find bugs, email me.

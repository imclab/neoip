/*! \file
    \brief Definition of the \ref tls_profile_t

*/


/* system include */
/* local include */
#include "neoip_tls_profile.hpp"

NEOIP_NAMESPACE_BEGIN;

// definition of \ref tls_profile_t constant
const tls_authtype_t	tls_profile_t::AUTHTYPE		= strtype_tls_authtype_t::ANON;
const size_t		tls_profile_t::DH_PARAM_NBIT	= 1024;
// end of constants definition

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//                              ctor/dtor
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

/** \brief Constructor
 */
tls_profile_t::tls_profile_t()	throw()
{
	// init each plain field with its default value
	authtype	( AUTHTYPE	);
	dh_param_nbit	( DH_PARAM_NBIT	);
}

/** \brief Destructor
 */
tls_profile_t::~tls_profile_t()	throw()
{
}


//////////////////////////////////////////////////////////////////////////////	
//////////////////////////////////////////////////////////////////////////////	
//                     check function
//////////////////////////////////////////////////////////////////////////////	
//////////////////////////////////////////////////////////////////////////////	

/** \brief Check the validity of the profile
 */
crypto_err_t	tls_profile_t::check()	const throw()
{
	// return no error
	return crypto_err_t::OK;
}

NEOIP_NAMESPACE_END


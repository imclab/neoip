/*! \file
    \brief Definition of the unit test for the \ref idleop_t

*/

/* system include */
/* local include */
#include "neoip_idleop_nunit.hpp"
#include "neoip_idleop.hpp"
#include "neoip_log.hpp"
#include "neoip_nipmem_alloc.hpp"


NEOIP_NAMESPACE_BEGIN;

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//                     ctor/dtor
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

/** \brief Constructor
 */
idleop_testclass_t::idleop_testclass_t()	throw()
{
	// zero some field
	idleop	= NULL;
}

/** \brief Destructor
 */
idleop_testclass_t::~idleop_testclass_t()	throw()
{
	// deinit the testclass just in case
	neoip_nunit_testclass_deinit();
}
	
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//                     nunit init/deinit
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

/** \brief Init the testclass implementation
 */
nunit_err_t	idleop_testclass_t::neoip_nunit_testclass_init()	throw()
{
	// return no error
	return nunit_err_t::OK;
}

/** \brief DeInit the testclass implementation
 */
void	idleop_testclass_t::neoip_nunit_testclass_deinit()	throw()
{
	// log to debug
	KLOG_DBG("enter");
	// destruct the idleop_t
	nipmem_zdelete idleop;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//                      test_function
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

/** \brief Test function
 */
nunit_res_t	idleop_testclass_t::general(const nunit_testclass_ftor_t &testclass_ftor) throw()
{
	// start the idleop_t
	bool	failed;
	idleop	= nipmem_new idleop_t();
	failed	= idleop->start(this, NULL);
	NUNIT_ASSERT( !failed );
	
	// copy the functor to report nunit_res_t asynchronously
	nunit_ftor	= testclass_ftor;
	return NUNIT_RES_DELAYED;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//                           idleop_t callback
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

/** \brief callback notified by \ref idleop_t when some time are available
 */
bool	idleop_testclass_t::neoip_idleop_cb(void *cb_userptr, idleop_t &cb_idleop)	throw()
{
	// log to debug
	KLOG_DBG("enter");

	// delete the idleop
	nipmem_zdelete	idleop;
	// notify a success
	nunit_ftor(NUNIT_RES_OK);	
	// return dontkeep
	return false;
}

NEOIP_NAMESPACE_END


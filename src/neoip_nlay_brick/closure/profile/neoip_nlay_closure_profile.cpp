/*! \file
    \brief Definition of the \ref nlay_closure_profile_t

*/

/* system include */
#include <iostream>
/* local include */
#include "neoip_nlay_closure_profile.hpp"
#include "neoip_nlay_closure.hpp"

NEOIP_NAMESPACE_BEGIN;


//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//                              ctor/dtor
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

/** \brief Constructor
 */
nlay_closure_profile_t::nlay_closure_profile_t()	throw()
{
	// set the default parameter
	close_itor_delay_val	= nlay_closure_t::CLOSE_ITOR_DELAY_DFL;
	close_resp_delay_val	= nlay_closure_t::CLOSE_RESP_DELAY_DFL;
	probe_period_val	= nlay_closure_t::PROBE_PERIOD_DFL;
}

/** \brief Destructor
 */
nlay_closure_profile_t::~nlay_closure_profile_t()	throw()
{
}

//////////////////////////////////////////////////////////////////////////////	
//////////////////////////////////////////////////////////////////////////////	
//                     to_string() function
//////////////////////////////////////////////////////////////////////////////	
//////////////////////////////////////////////////////////////////////////////	

/** \brief Convert the object into a string
 */
std::string	nlay_closure_profile_t::to_string()	const throw()
{
	std::ostringstream oss;
	oss << "close_itor_delay=" << close_itor_delay_val;
	oss << "close_resp_delay=" << close_resp_delay_val;
	oss << "probe_period=" << probe_period_val;
	return oss.str();
}


//////////////////////////////////////////////////////////////////////////////	
//////////////////////////////////////////////////////////////////////////////	
//                     check function
//////////////////////////////////////////////////////////////////////////////	
//////////////////////////////////////////////////////////////////////////////	

/** \brief Check the validity of the profile
 * 
 * @return false if there is no error in the profile, true otherwise
 */
nlay_err_t	nlay_closure_profile_t::check()		const throw()
{
	return nlay_err_t::OK;
}

NEOIP_NAMESPACE_END


/*! \file
    \brief Definition of the \ref nlay_idletimeout_profile_t

*/

/* system include */
#include <iostream>
/* local include */
#include "neoip_nlay_idletimeout_profile.hpp"
#include "neoip_nlay_idletimeout.hpp"

NEOIP_NAMESPACE_BEGIN;


//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//                              ctor/dtor
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

/** \brief Constructor
 */
nlay_idletimeout_profile_t::nlay_idletimeout_profile_t()	throw()
{
	// set the default parameter
	idle_delay_val	= nlay_idletimeout_t::IDLE_DELAY_DFL;
}

/** \brief Destructor
 */
nlay_idletimeout_profile_t::~nlay_idletimeout_profile_t()	throw()
{
}

//////////////////////////////////////////////////////////////////////////////	
//////////////////////////////////////////////////////////////////////////////	
//                     to_string() function
//////////////////////////////////////////////////////////////////////////////	
//////////////////////////////////////////////////////////////////////////////	

/** \brief Convert the object into a string
 */
std::string	nlay_idletimeout_profile_t::to_string()	const throw()
{
	std::ostringstream oss;
	oss << "idle_delay=" << idle_delay_val;
	return oss.str();
}


//////////////////////////////////////////////////////////////////////////////	
//////////////////////////////////////////////////////////////////////////////	
//                     check function
//////////////////////////////////////////////////////////////////////////////	
//////////////////////////////////////////////////////////////////////////////	

/** \brief Check the validity of the profile
 * 
 * @return false if there is no error in the profile, true otherwise
 */
nlay_err_t	nlay_idletimeout_profile_t::check()	const throw()
{
	return nlay_err_t::OK;
}

NEOIP_NAMESPACE_END

